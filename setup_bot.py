import re
from socket import timeout
import discord
kh·ªèi  b·∫•t h√≤a . l·ªánh nh·∫≠p m√°y l·∫ª  
import json 
import os
import requests
from youtube_search import YoutubeSearch
import random
import os
import random
import asyncio
import wikipedia
import datetime
import time
import urllib.request
from discord.utils import find
from bs4 import BeautifulSoup
def command_prefix(bot, message):
    with open(r"C:\codde\discord_bot\data.json", 'r') as f:
        users = json.load(f)
    prefix = users[str(message.guild.id)]['prefix']
    return commands.when_mentioned_or(*prefix)(bot, message)
def get_prefix():
    with open(r"C:\codde\discord_bot\data.json", 'r') as f:
        prefix = json.load(f)
    return prefix

bot = commands.Bot(command_prefix=(command_prefix))
bot.remove_command("help")
@bot.event
async def on_guild_join(guild):
    users = get_prefix()
    users[str(guild.id)] = {}
    users[str(guild.id)]['prefix'] = '?'
    with open(r"C:\codde\discord_bot\data.json", 'w') as f:
        json.dump(users, f)
@bot.event
async def on_ready():
    print(f'[CLIENT] client completed')
@bot.group(invoke_without_command=True)
async def help(ctx, arg = None):
    help_prefix = get_prefix()[str(ctx.message.guild.id)]['prefix']
    if arg == None:
        em = discord.Embed(title = "‚ÑπÔ∏èhelp", description = "s·ª≠ d·ª•ng /help ƒë·ªÉ bi·∫øt c√°c l·ªánh c√≥ th·ªÉ s·ª≠ d·ª•ng tr√™n bot v√† /help <command> ƒë·ªÉ bi·∫øt c√°ch s·ª≠ d·ª•ng")
        em.add_field(name = "**‚úÖother command**", value = "xsmb, covid19, weather, youtube_search, translate, truyentranh, wiki, news, google_search, google_search, videofb")
        em.add_field(name = "**üéÆgame command**", value = "dovui, play_taixiu, keobuabao, vuatiengviet, dhbc(ƒëu·ªïi h√¨nh b·∫Øt ch·ªØ), noitu, slot")
        em.add_field(name = "**üèµÔ∏èroleplay command**", value = "balance, bank, work, daily, ")
        em.add_field(name = "**‚öôÔ∏èsystem command bot**", value = "help, offbot, ping, callad, sendnoti, setprefix")
        em.add_field(name = "**üî´fun command**", value = "thinh, mark, tiki, taoanhdep, shopmaihuong, caunoihay, thayboi, banner1")
        await ctx.send(embed = em)
    elif arg == 'balance':
        em = discord.Embed(title = "balance", description = "xem s·ªë ti·ªÅn hi·ªán ƒëang c√≥ c·ªßa b·∫°n")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}balance @mention")
        await ctx.send(embed = em)
    elif arg == 'bank':
        em = discord.Embed(title = "bank", description = "ng√¢n h√†ng h·ªó tr·ª£ r√∫t v√† g·ª≠i ti·ªÅn c·ªßa b·∫°n")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}bank withdraw <amount>\n{get_prefix()[str(ctx.message.guild.id)]['prefix']}bank deposit <amount>\n{get_prefix()[str(ctx.message.guild.id)]['prefix']}bank send <amount> @mention")
        await ctx.send(embed = em)
    elif arg == 'callad':
        em = discord.Embed(title = "callad", description = "b√°o c√°o v·∫•n ƒë·ªÅ ho·∫∑c c√¢u h·ªèi b·∫°n mu·ªën g·ª≠i ƒë·∫øn admin")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}callad <v·∫•n ƒë·ªÅ c·∫ßn b√°o c√°o>")
        await ctx.send(embed = em)
    elif arg == 'caunoihay':
        em = discord.Embed(title = "caunoihay", description = "random m·ªôt c√¢u n√≥i c·ªßa c√°c vƒ© nh√¢n:))")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}caunoihay")
        await ctx.send(embed = em)
    elif arg == 'covid19':
        em = discord.Embed(title = "covid19", description = "xem th√¥ng tin v·ªÅ d·ªãch b·ªánh covid 19 t·∫°i Vi·ªát Nam")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}covid19")
        await ctx.send(embed = em)
    elif arg == 'daily':
        em = discord.Embed(title = "daily", description = "nh·∫≠n th∆∞·ªüng online m·ªói 24H")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}D>")
        await ctx.send(embed = em)
    elif arg == 'dhbc':
        em = discord.Embed(title = "dhbc", description = "game ƒëu·ªïi h√¨nh b·∫Øt ch·ªØ:))")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}dhbc")
        await ctx.send(embed = em)
    elif arg == 'keobuabao':
        em = discord.Embed(title = "keobuabao", description = "game k√©o b√∫a bao v·ªõi bot")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}keobuabao <k√©o/b√∫a/bao> <s·ªë ti·ªÅn c∆∞·ª£c>")
        await ctx.send(embed = em)
    elif arg == 'mark':
        em = discord.Embed(title = "mark", description = "gh√©p ·∫£nh x√†m")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}mark")
        await ctx.send(embed = em)
    elif arg == 'news':
        em = discord.Embed(title = "news", description = "xem tin m·ªõi m·ªói ng√†y tr√™n vnexpress")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}news")
        await ctx.send(embed = em)
    elif arg == 'noitu':
        em = discord.Embed(title = "noitu", description = "game n·ªëi t·ª´ c√πng bot")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}noitu")
        await ctx.send(embed = em)
    elif arg == 'ping':
        em = discord.Embed(title = "ping", description = "pong!")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}ping")
        await ctx.send(embed = em)
    elif arg == 'play_taixiu':
        em = discord.Embed(title = "play_taixiu", description = "ch∆°i game t√†i x·ªâu tr√™n bot:)")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}play_taixiu <t√†i/x·ªâu> <s·ªë ti·ªÅn c∆∞·ª£c>")
        await ctx.send(embed = em)
    elif arg == 'shopmaihuong':
        em = discord.Embed(title = "shopmaihuong", description = "gh√©p ·∫£nh x√†m")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}shopmaihuong")
        await ctx.send(embed = em)
    elif arg == 'slot':
        em = discord.Embed(title = "slot", description = "game")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}slot <s·ªë ti·ªÅn c∆∞·ª£c>")
        await ctx.send(embed = em)
    elif arg == 'taoanhdep':
        em = discord.Embed(title = "taoanhdep", description = "gh√©p ·∫£nh x√†m")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}taoanhdep")
        await ctx.send(embed = em)
    elif arg == 'thayboi':
        em = discord.Embed(title = "thayboi", description = "xem b√≥i online:))")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}thayboi")
        await ctx.send(embed = em)
    elif arg == 'thinh':
        em = discord.Embed(title = "thinh", description = "th√≠nh")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}thinh")
        await ctx.send(embed = em)
    elif arg == 'tiki':
        em = discord.Embed(title = "tiki", description = "gh√©p ·∫£nh x√†m")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}tiki <name>")
        await ctx.send(embed = em)
    elif arg == 'translate':
        em = discord.Embed(title = "translate", description = "google d·ªãch")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}translate")
        await ctx.send(embed = em)
    elif arg == 'truyentranh':
        em = discord.Embed(title = "truyentranh", description = "xem truy·ªán tranh v√† t√¨m nh·ªØng truy·ªán m·ªõi nh·∫•t tr√™n toptruyen.net v√† truyentranh24.com")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}truyentranh search <keywword> (t√¨m truy·ªán)\n{get_prefix()[str(ctx.message.guild.id)]['prefix']}truyentranh news (xem c√°c truy·ªán m·ªõi nh·∫•t tr√™n toptruyen.net)")
        await ctx.send(embed = em)
    elif arg == 'vuatiengviet':
        em = discord.Embed(title = "vuatiengviet", description = "ch∆°i vua ti·∫øng vi·ªát:0")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}vuatiengviet")
        await ctx.send(embed = em)
    elif arg == 'weather ':
        em = discord.Embed(title = "weather", description = "gh√©p ·∫£nh x√†m")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}weather <location>")
        await ctx.send(embed = em)
    elif arg == 'wiki':
        em = discord.Embed(title = "wiki", description = "t√¨m ki·∫øm th√¥ng tin tr√™n wikipedia")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}wiki <keywword>")
        await ctx.send(embed = em)
    elif arg == 'work':
        em = discord.Embed(title = "work", description = "c√≥ l√†m th√¨ m·ªõi c√≥ ƒÉn")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}work")
        await ctx.send(embed = em)
    elif arg == 'xsmb':
        em = discord.Embed(title = "xsmb", description = "xem k·∫øt qu·∫£ x·ªï s·ªë mi·ªÅn B·∫Øc")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}xsmb")
        await ctx.send(embed = em)
    elif arg == 'youtube_search':
        em = discord.Embed(title = "youtube_search", description = "t√¨m video youtube")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}youtube_search <keyword>")
        await ctx.send(embed = em)
    elif arg == 'dovui':
        em = discord.Embed(title = "dovui", description = "game ƒë·ªë vui, kh√¥ng vui th√¨ th√¥i")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}dovui")
        await ctx.send(embed = em)
    elif arg == 'google_search':
        em = discord.Embed(title = "google_search", description = "t√¨m ki·∫øm th√¥ng tin tr√™n google")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}google_search")
        await ctx.send(embed = em)
    elif arg == 'setprefix':
        em = discord.Embed(title = "setprefix", description = f"set prefix bot cho sever")
        em.add_field(name = "**c√°ch d√πng**", value = f"{help_prefix}setprefix <prefix>")
        await ctx.send(embed = em)
    elif arg == 'banner1':
        em = discord.Embed(title = "banner1", description = f"t·∫°o banner cho ri√™ng b·∫°n")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}banner1")
        await ctx.send(embed = em)
    elif arg == 'videofb':
        em = discord.Embed(title = "videofb", description = f"t·∫£i video t·ª´ link video facbook (l∆∞u √Ω: video c√†ng d√†i t·∫£i c√†ng l√¢u)")
        em.add_field(name = "**c√°ch d√πng**", value = f"{get_prefix()[str(ctx.message.guild.id)]['prefix']}videofb <link>")
        await ctx.send(embed = em)
    else:
        await ctx.send(f"l·ªánh b·∫°n nh·∫≠p kh√¥ng t·ªìn t·∫°i ho·∫∑c do th·∫±ng admin l·ªèl l∆∞·ªùi l√†m n√™n ƒë·ªÉ th·∫ø=)). c√≥ th·ªÉ s·ª≠ d·ª•ng {get_prefix()[str(ctx.message.guild.id)]['prefix']}callad ƒë·ªÉ g·ªçi n√≥ d·∫≠y")
    
#run bot
#client
#covid19
@bot.command()
async def covid19(ctx):
    full_url = 'https://api.phamvandien.xyz/covid?country=viet%20nam'
    get = requests.get(full_url)
    data = get.text
    parse_json = json.loads(data)
    data1 = parse_json['data']['danso']
    data2 = parse_json['data']['dangdieutri']
    data3 = parse_json['data']['ca_nhiem_moi']
    data4 = parse_json['data']['hoiphuc']
    data5 = parse_json['data']['total']
    data6 = parse_json['data']['tong_ca_tu_vong']
    result = """th√¥ng tin v·ªÅ d·ªãch b·ªánh covid 19 t·∫°i Vi·ªát Nam nh∆∞ sau: d√¢n s·ªë {data1} ng∆∞·ªùi\nt·ªïng s·ªë ca nhi·ªÖm: {data5} \ns·ªë ca ƒëang ƒëi·ªÅu tr·ªã {data2} ca \ns·ªë b·ªánh nh√¢n ƒë√£ kh·ªèi b·ªánh: {data4} b·ªánh nh√¢n \nca nhi·ªÖm m·ªõi: {data3} \nt·ªïng s·ªë ca d√£ t·ª≠ vong: {data6}""".format(data1 = str(data1), data2 = str(data2), data3 = str(data3), data4 = str(data4), data5 = str(data5), data6 = str(data6))
    await ctx.send(result)
#xsmb
@bot.command()
async def xsmb(ctx):
    #xsmb
    try:
        result = []
        url = 'https://www.xoso.net/getkqxs/mien-bac.js'
        get_data = requests.get(url)
        x = get_data.text
        soup = BeautifulSoup(x, 'html.parser')
        for a in soup.find_all(class_ = 'giaidb'):
            result.append(a.text)
            print(a.text)
        for c in soup.find_all(class_ = 'giai1'):
            result.append(c.text)
            print(c.text)
        for d in soup.find_all(class_ = 'giai2'):
            result.append(d.text)
            print(d.text)
        for e in soup.find_all(class_ = 'giai3'):
            result.append(e.text)
            print(e.text)
        for f in soup.find_all(class_ = 'giai4'):
            result.append(f.text)
            print(f.text)
        for g in soup.find_all(class_ = 'giai5'):
            result.append(g.text)
            print(g.text)
        for h in soup.find_all(class_ = 'giai6'):
            result.append(h.text)
            print(h.text)
        for k in soup.find_all(class_ = 'giai7'):
            result.append(k.text)
            print(k.text)
        for l in soup.find_all(class_ = 'ngay'):
            result.append(l.text)
            print(l.text)
        t = '\t'
        n = '\n'
        await ctx.send(f'K·∫øt qu·∫£ x·ªï s·ªë mi·ªÅn B·∫Øc {str(result[8]).strip(f"{t}")}{n}{n}Gi·∫£i ƒë·∫∑c bi·ªát: {str(result[0]).strip(f"{t}")}{n}Gi·∫£i nh·∫•t: {str(result[1]).strip(f"{t}")}{n}Gi·∫£i nh√¨: {str(result[2]).strip(f"{t}")}{n}Gi·∫£i ba: {str(result[3]).strip(f"{t}")}\nGi·∫£i t∆∞: {str(result[4]).strip(f"{t}")}{n}Gi·∫£i nƒÉm: {str(result[5]).strip(f"{t}")}{n}Gi·∫£i s√°u: {str(result[6]).strip(f"{t}")}{n}Gi·∫£i b·∫£y: {str(result[7]).strip(f"{t}")}')
    except Exception as e:
        print(e)
    
#weather
@bot.command()
async def weather(ctx, *, arg = None):
    if arg == None:
        await ctx.send('sai c√∫ ph√°p')
    elif arg != None:
        url = f'https://api.accuweather.com/locations/v1/cities/search.json?q={arg}&apikey=d7e795ae6a0d44aaa8abb1a0a7ac19e4&language=vi-vn'
        image = f'http://mewdev.pro/api/v2/weather?location={arg}&apikey=Meew.90c3759fff62c248ba845561583c76fa'
        get_image = requests.get(image)
        get = requests.get(url)
        img_txt = get_image.text
        data_txt = get.text
        data_json = json.loads(data_txt)
        image_json = json.loads(img_txt)
        if len(data_json) != 0 and image_json['success'] == True:
            img = requests.get(image_json['data'])
            file = open("weather.png", "wb")
            file.write(img.content)
            file.close()
            key = data_json[0]['Key']
            get2 = requests.get(f'http://api.accuweather.com/forecasts/v1/daily/10day/{key}?apikey=d7e795ae6a0d44aaa8abb1a0a7ac19e4&details=true&language=vi')
            txt2 = get2.text
            json2 = json.loads(txt2) 
            temp_min = round((json2['DailyForecasts'][0]['Temperature']['Minimum']['Value'] - 32)/1.8)
            temp_max = round((json2['DailyForecasts'][0]['Temperature']['Maximum']['Value'] - 32)/1.8)
            feel_like = round((json2['DailyForecasts'][0]['RealFeelTemperature']['Minimum']['Value'] - 32)/1.8)
            sunrise = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(json2['DailyForecasts'][0]['Sun']['EpochRise']))
            sunset = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(json2['DailyForecasts'][0]['Sun']['EpochSet']))
            moonrise = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(json2['DailyForecasts'][0]['Moon']['EpochRise']))
            moonset = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(json2['DailyForecasts'][0]['Moon']['EpochSet']))
            day =  json2['DailyForecasts'][0]['Day']['LongPhrase']
            night = json2['DailyForecasts'][0]['Night']['LongPhrase']
            description = json2['Headline']['Text']      
            await ctx.send(f'Th·ªùi ti·∫øt h√¥m nay: {description}\nüå°Ô∏èNhi·ªát ƒë·ªô cao nh√¢t - Th·∫•p nh·∫•t: {temp_max}¬∞C - {temp_min}¬∞C\nüå°Ô∏èNhi·ªát ƒë·ªô c·∫£m nh·∫≠n ƒë∆∞·ª£c: {feel_like}¬∞C\nüåÖM·∫∑t tr·ªùi m·ªçc: {sunrise}\nüåÑM·∫∑t tr·ªùi l·∫∑n: {sunset}\nüåÉM·∫∑t trƒÉng m·ªçc: {moonrise}\nüåÉM·∫∑t trƒÉng l·∫∑n: {moonset}\nüåûBan ng√†y: {day}\nüåûBan ƒë√™m: {night}', file = discord.File('weather.png'))
        elif len(data_json) != 0 and image_json['success'] == False:
            try:
                img = requests.get(f'https://nguyenmanh.name.vn/api/thoitiet?type=image&query={arg}&apikey=KCL98tNB')
                check = img.text
                if check == "Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm n√†y!":
                    await ctx.send('error')
                else:
                    file = open("weather.png", "wb")
                    file.write(img.content)
                    file.close()
                    key = data_json[0]['Key']
                    get2 = requests.get(f'http://api.accuweather.com/forecasts/v1/daily/10day/{key}?apikey=d7e795ae6a0d44aaa8abb1a0a7ac19e4&details=true&language=vi')
                    txt2 = get2.text
                    json2 = json.loads(txt2) 
                    temp_min = round((json2['DailyForecasts'][0]['Temperature']['Minimum']['Value'] - 32)/1.8)
                    temp_max = round((json2['DailyForecasts'][0]['Temperature']['Maximum']['Value'] - 32)/1.8)
                    feel_like = round((json2['DailyForecasts'][0]['RealFeelTemperature']['Minimum']['Value'] - 32)/1.8)
                    sunrise = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(json2['DailyForecasts'][0]['Sun']['EpochRise']))
                    sunset = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(json2['DailyForecasts'][0]['Sun']['EpochSet']))
                    moonrise = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(json2['DailyForecasts'][0]['Moon']['EpochRise']))
                    moonset = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(json2['DailyForecasts'][0]['Moon']['EpochSet']))
                    day =  json2['DailyForecasts'][0]['Day']['LongPhrase']
                    night = json2['DailyForecasts'][0]['Night']['LongPhrase']
                    description = json2['Headline']['Text']     
                    await ctx.send(f'Th·ªùi ti·∫øt h√¥m nay: {description}\nüå°Ô∏èNhi·ªát ƒë·ªô cao nh√¢t - Th·∫•p nh·∫•t: {temp_max}¬∞C - {temp_min}¬∞C\nüå°Ô∏èNhi·ªát ƒë·ªô c·∫£m nh·∫≠n ƒë∆∞·ª£c: {feel_like}¬∞C\nüåÖM·∫∑t tr·ªùi m·ªçc: {sunrise}\nüåÑM·∫∑t tr·ªùi l·∫∑n: {sunset}\nüåÉM·∫∑t trƒÉng m·ªçc: {moonrise}\nüåÉM·∫∑t trƒÉng l·∫∑n: {moonset}\nüåûBan ng√†y: {day}\nüåûBan ƒë√™m: {night}', file = discord.File('weather.png'))
            except Exception as e:
                print(e)
                await ctx.send('ƒë√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh')
        else:
            await ctx.send('error, l·ªói ch∆∞a x√°c ƒë·ªãnh')
    print(data_json['cod'])
    print(image_json['success'])
@bot.command()
async def youtube_search(ctx, arg = None):
    if arg == None:
        await ctx.send('b·∫°n ch∆∞a nh·∫≠p t·ª´ kh√°o c·∫ßn t√¨m ki·∫øm')
    else:
        await ctx.send('nh·∫≠p t·ª´ kh√≥a c·∫ßn t√¨m ki·∫øm')
        search = YoutubeSearch('{content}'.format(content = str(arg)), max_results=5).to_json()
        search_dict = json.loads(search)
        for v in search_dict['videos']:
            result = 'https://www.youtube.com/watch?v=' + v['id'] + " - " + v['title'] + " c·ªßa k√™nh " + v['channel']
            await ctx.send('ƒë√¢y l√† c√°c k·∫øt qu·∫£ t√¨m ki·∫øm {result}'.format(result = result))
@bot.command()
@commands.is_owner()
async def offbot(ctx):
    if (ctx.message.author.id == 716146182849560598): 
        await ctx.send('ƒë√£ t·∫Øt bot!')
        print("off bot")
        await ctx.bot.logout()
    else:
        await ctx.send('b·∫°n kh√¥ng ph·∫£i admin bot n√™n kh√¥ng ƒë·ªß quy·ªÅn h·∫°n s·ª≠ d·ª•ng l·ªánh n√†y')
@bot.command()
async def ping(ctx):
    await ctx.send('pong!')
@bot.command()
async def play_taixiu(ctx, arg1 = None, arg2 = None):
    await open_account(ctx.message.author.id)
    member_data = await get_bank_data()
    if member_data[str(ctx.message.author.id)]["Wallet"] < int(arg2):
        await ctx.send('kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ ch∆°i:)')
    else:
        try:
            url = 'https://api.hclaptrinh.repl.co/api/taixiu'
            get = requests.get(url)
            data_txt = get.text
            data_json = json.loads(data_txt)
            result = data_json['result']
            dice = data_json['dice']
            if result == 'xiu':
                result = 'x·ªâu'
            elif result == 'tai':
                result = 't√†i'
            if arg1 == None:
                await ctx.send('h√£y c∆∞·ª£c t√†i ho·∫∑c x·ªâu')
            elif arg2 == None or int(arg2) < 50:
                await ctx.send('s·ªë ti·ªÅn c∆∞·ª£c kh√¥ng c∆∞·ª£c ƒë·ªÉ tr·ªëng v√† ph·∫£i t·ª´ 50$ tr·ªü l√™n')
            elif arg1 == result:
                gif = 'https://media1.giphy.com/media/ckHAdLU2OmY7knUClD/giphy.gif?cid=ecf05e47venaa45nhe4pmfsckgtrjasrpdzs6vtmpvwya6fk&rid=giphy.gif&ct=g'
                gif2 = 'https://media1.giphy.com/media/g9582DNuQppxC/giphy.gif?cid=ecf05e4743jop5ctofl2a5763ih04tc5b91dfnor287cu5tv&rid=giphy.gif&ct=g'
                em_load = discord.Embed(colour = ctx.author.color, description = 'ƒëang l·∫Øc x√∫c s·∫Øc...')
                em_load.set_image(url = gif)
                em_win = discord.Embed(colour = ctx.author.color, description = f'\n{dice[0]} {dice[1]} {dice[2]} | {result} v√† gom v·ªÅ ƒë∆∞·ª£c {arg2}$ ti·ªÅn c∆∞·ª£c')
                em_win.set_image(url = gif2)
                await ctx.send(embed = em_load)
                await asyncio.sleep(3)
                await ctx.send(embed = em_win)
                await update(ctx.message.author.id, arg2, 'keobuabao_win')
            elif arg1 != result:
                gif = 'https://media1.giphy.com/media/ckHAdLU2OmY7knUClD/giphy.gif?cid=ecf05e47venaa45nhe4pmfsckgtrjasrpdzs6vtmpvwya6fk&rid=giphy.gif&ct=g'
                gif2 = 'https://media3.giphy.com/media/l22ysLe54hZP0wubek/giphy.gif?cid=ecf05e47mba9xtd5rurzzo1flalwaqu6znpuld9vm6b2rz13&rid=giphy.gif&ct=g'
                em_load = discord.Embed(colour = ctx.author.color, description = 'ƒëang l·∫Øc x√∫c s·∫Øc...')
                em_load.set_image(url = gif)
                em_win = discord.Embed(colour = ctx.author.color, description = f'b·∫°n ƒë√£ thua, k·∫øt qu·∫£ l√†:\n{dice[0]} {dice[1]} {dice[2]} | {result} v√† m·∫•t {arg2}$ ti·ªÅn c∆∞·ª£c')
                em_win.set_image(url = gif2)
                await ctx.send(embed = em_load)
                await asyncio.sleep(3)
                await ctx.send(embed = em_win)
                await update(ctx.message.author.id, arg2, 'keobuabao_lose')
            else:
                await ctx.send('l·ªói')
        except Exception as e:
            print(e)
            await ctx.send('error')
@bot.command(name = "work")
@commands.cooldown(1, 3600, commands.BucketType.user)
async def work(ctx):
    send = await ctx.send('ƒë√¢y l√† c√°c vi·ªác b·∫°n c√≥ th·ªÉ l√†m ƒë·ªÉ ki·∫øm ti·ªÅn\n1. b√°n v√© s·ªë\n2. s·ª≠a xe\n3. l·∫≠p tr√¨nh\n4. th·ª£ h·ªì\n5. b√°n h√†ng online\n6. ƒê·ª©ng ƒë∆∞·ªùng:))\nreply tin nh·∫Øn theo s·ªë th·ª© t·ª± ƒë·ªÉ ch·ªçn vi·ªác mu·ªën l√†m')
    def check(m):
            return m.author == ctx.author and m.channel == ctx.channel and m.reference is not None and m.reference.message_id == send.id
    message = await bot.wait_for('message', check = check, timeout=45)
    if str(message.content.lower()) == "1":
        await open_account(message.author.id)
        member_data = await get_bank_data()
        earning = random.randrange(301)
        member_data[str(ctx.author.id)]['Wallet'] += earning
        await ctx.send(f"b·∫°n b√°n v√© s·ªë v√† ki·∫øm ƒë∆∞·ª£c {earning}$!")
        save_member_data(member_data)
    elif str(message.content.lower()) == "2":
        await open_account(message.author.id)
        member_data = await get_bank_data()
        earning = random.randrange(301)
        member_data[str(ctx.author.id)]['Wallet'] += earning
        await ctx.send(f"b·∫°n l√†m th·ª£ s·ª≠a xe v√† ki·∫øm ƒë∆∞·ª£c {earning}$!")
        save_member_data(member_data)
    elif str(message.content.lower()) == "3":
        await open_account(message.author.id)
        member_data = await get_bank_data()
        earning = random.randrange(301)
        member_data[str(ctx.author.id)]['Wallet'] += earning
        save_member_data(member_data)
        await ctx.send(f"b·∫°n l√†m l·∫≠p tr√¨nh vi√™n v√† ki·∫øm ƒë∆∞·ª£c {earning}$!")
    elif str(message.content.lower()) == "4":
        await open_account(message.author.id)
        member_data = await get_bank_data()
        earning = random.randrange(301)
        member_data[str(ctx.author.id)]['Wallet'] += earning
        save_member_data(member_data)
        await ctx.send(f"b·∫°n l√†m th·ª£ h·ªì v√† ki·∫øm ƒë∆∞·ª£c {earning}$!")
    elif str(message.content.lower()) == "5":
        await open_account(message.author.id)
        member_data = await get_bank_data()
        earning = random.randrange(301)
        member_data[str(ctx.author.id)]['Wallet'] += earning
        save_member_data(member_data)
        await ctx.send(f"b·∫°n b√°n h√†ng online v√† ki·∫øm ƒë∆∞·ª£c {earning}$!")
    elif str(message.content.lower()) == "6":
        await open_account(message.author.id)
        member_data = await get_bank_data()
        earning = random.randrange(301)
        member_data[str(ctx.author.id)]['Bank'] += earning
        save_member_data(member_data)
        await ctx.send(f"b·∫°n ƒë∆∞·ª£c m·ªôt anh ƒë·∫πp trai g·ªçi v√† ki·∫øm ƒë∆∞·ª£c {earning}$!")
    else:
        await ctx.send('b·∫°n ch·ªâ ƒë∆∞·ª£c ch·ªçn 1 trong 6 ngh·ªÅ tr√™n')
@bot.event
async def on_command_error(ctx, error):
    pass
@work.error
async def work_error(ctx, error):
    if isinstance(error, commands.CommandOnCooldown):
        await ctx.send('b·∫°n ƒë√£ l√†m vi·ªác qu√° nhi·ªÅu r·ªìi, h√£y ngh·ªâ ng∆°i v√† quay l·∫°i sau {:.2f} gi√¢y'.format(error.retry_after))
@bot.command()
async def balance(ctx, member: discord.User=None):
    try:
        if member == None:
            await open_account(ctx.author.id)
            member_data = await get_bank_data()
            wallet = member_data[str(ctx.author.id)]['Wallet']
            bank = member_data[str(ctx.author.id)]["Bank"]
            embed = discord.Embed(title=f"s·ªë ti·ªÅn c·ªßa {ctx.author.display_name}")
            embed.add_field(name="ti·ªÅn m·∫∑t", value=wallet)
            embed.add_field(name="trong th·∫ª ng√¢n h√†ng", value=bank)
            await ctx.send(embed=embed)
        else:
            await open_account(member.id)
            member_data = await get_bank_data()
            wallet = member_data[str(member.id)]["Wallet"]
            bank = member_data[str(member.id)]["Bank"]
            embed = discord.Embed(title=f"s·ªë ti·ªÅn c·ªßa {member}")
            embed.add_field(name="ti·ªÅn m·∫∑t", value=wallet)
            embed.add_field(name="trong th·∫ª ng√¢n h√†ng", value= bank)
            await ctx.send(embed=embed)
    except Exception as e:
        print(e)
        await ctx.send('error')
@bot.group(invoke_without_command=True)
async def bank(ctx):
    embed = discord.Embed(title="MIRAI BANK", description="n∆°i g·ª≠i v√† r√∫t ti·ªÅn t·ª´ ng√¢n h√†ng", color=0x00ff00)
    embed.add_field(name = "c√°ch s·ª≠ d·ª•ng", value = "/bank withdraw, /bank deposit") #creates embed
    file = discord.File(r"image\bank.png", filename="bank.png") 
    embed.set_image(url="attachment://bank.png")
    await ctx.send(file=file, embed=embed)
@bank.command()
@commands.cooldown(3, 2400, commands.BucketType.user)
async def withdraw(ctx, arg = None):
    await open_account(ctx.message.author.id)
    member_data = await get_bank_data()
    if member_data[str(ctx.author.id)]["Bank"] < int(arg):
        await ctx.send('m ko ƒë·ªß s·ªë ti·ªÅn ƒë·ªÉ r√∫t, t ko ngu ƒë√¢u m√† ƒë√≤i l·ª´a=))')
    elif arg == None:
        await ctx.send('nh·∫≠p s·ªë ti·ªÅn c·∫ßn r√∫t')
    elif member_data[str(ctx.author.id)]["Bank"] >= int(arg):
        await ctx.send(f'ƒë√£ r√∫t {arg}$ t·ª´ t√†i kho·∫£n')
        await update(ctx.message.author.id, arg, 'bank')
@withdraw.error
async def withdraw_error(ctx, error):
    if isinstance(error, commands.CommandOnCooldown):
        await ctx.send('ng√¢n h√†ng h·ªèng ATM r·ªìi:((, h√£y quay l·∫°i sau {:.2f} gi√¢y'.format(error.retry_after))
@bank.command(name = "deposit")
@commands.cooldown(3, 2400, commands.BucketType.user)
async def deposit(ctx, arg = None):
    await open_account(ctx.message.author.id)
    member_data = await get_bank_data()
    if arg == None:
        await ctx.send('nh·∫≠p s·ªë ti·ªÅn c·∫ßn b·ªè v√†o t√†i kho·∫£n')
    elif member_data[str(ctx.author.id)]["Wallet"] < int(arg):
        await ctx.send('m ko ƒë·ªß s·ªë ti·ªÅn ƒë·ªÉ g·ª≠i v√†o t√†i kho·∫£n, t ko ngu ƒë√¢u m√† ƒë√≤i l·ª´a=))')
    elif member_data[str(ctx.author.id)]["Wallet"] >= int(arg):
        await ctx.send(f'ƒë√£ tr·ª´ {arg}$ c·ªßa v√≠')
        await update(ctx.message.author.id, arg, 'wallet')
@deposit.error
async def deposit_error(ctx, error):
    if isinstance(error, commands.CommandOnCooldown):
        await ctx.send('ng√¢n h√†ng ƒë√≥ng c·ª≠a r·ªìi, h√£y quay l·∫°i sau {:.2f} gi√¢y'.format(error.retry_after))
@bank.command(name = "send")
@commands.cooldown(3, 2400, commands.BucketType.user)
async def send(ctx, member: discord.User=None, amount = None):
    await open_account(ctx.message.author.id)
    await open_account(member.id)
    data_send_user = await get_bank_data() 
    data_receive_user = await get_bank_data()
    if discord.User == None or amount == None or discord.User == None and amount == None:
        await ctx.send('sai c√∫ ph√°p')
    elif data_send_user[str(ctx.author.id)]["Bank"] < int(amount):
        await ctx.send('kh√¥ng ƒë·ªß s·ªë ti·ªÅn trong t√†i kho·∫£n ƒë·ªÉ g·ª≠i')
    else:
        try:
            await update(ctx.message.author.id, amount, 'send_user')
            await update(member.id, amount, 'receive_user')
            await ctx.send(f'ƒë√£ chuy·ªÉn ti·ªÅn th√†nh c√¥ng cho {member.mention}')
        except Exception as e:
            print(e)
            await ctx.send('error')
@send.error
async def send_error(ctx, error):
    if isinstance(error, commands.CommandOnCooldown):
        await ctx.send('ng√¢n h√†ng ƒë√≥ng c·ª≠a r·ªìi, h√£y quay l·∫°i sau {:.2f} gi√¢y'.format(error.retry_after))
@bot.command()
async def thinh(ctx):
    global random, json
    url = 'https://raw.githubusercontent.com/ledingg1997/ledingg-/main/datathinh.json'
    random_thinh = random.randint(1, 187)
    get = requests.get(url)
    data = get.text
    data_json = json.loads(data)
    result = data_json['data'][f'{random_thinh}']
    await ctx.send(result)
@bot.command()
async def keobuabao(ctx, arg1 = None, arg2 = None):
    await open_account(ctx.message.author.id)
    member_data = await get_bank_data()
    choice = ['k√©o', 'b√∫a', 'bao', 'k√©o', 'b√∫a', 'bao']
    bot = random.choice(choice)
    if arg1 == None or arg2 == None or arg1 == None and arg2 == None:
            await ctx.send('sai c√∫ ph√°p')
    elif member_data[str(ctx.author.id)]["Wallet"] < int(arg2):
        await ctx.send('ko ƒë·ªß ti·ªÅn ƒë·ªÉ ch∆°i')
    else:
        if arg1 == bot:
            await ctx.send(f'[k√©o b√∫a bao]\nbot ch·ªçn: {bot}\nb·∫°n ch·ªçn: {arg1}\nk·∫øt qu·∫£: H√≤a')
        elif arg1 == 'bao' and bot == 'b√∫a':
            await ctx.send(f'[k√©o b√∫a bao]\nbot ch·ªçn: {bot}\nb·∫°n ch·ªçn: {arg1}\nk·∫øt qu·∫£: B·∫°n ƒë√£ th·∫Øng v√† nh·∫≠n ƒë∆∞∆°c {arg2}$')
            await update(ctx.message.author.id, arg2, 'keobuabao_win')
        elif arg1 == 'bao' and bot == 'k√©o':
            await ctx.send(f'[k√©o b√∫a bao]\nbot ch·ªçn: {bot}\nb·∫°n ch·ªçn: {arg1}\nK·∫øt qu·∫£: B·∫°n ƒë√£ thua v√† m·∫•t {arg2}$')
            await update(ctx.message.author.id, arg2, 'keobuabao_lose')
        elif arg1 == 'k√©o' and bot == 'b√∫a':
            await ctx.send(f'[k√©o b√∫a bao]\nbot ch·ªçn: {bot}\nb·∫°n ch·ªçn: {arg1}\nK·∫øt qu·∫£: B·∫°n ƒë√£ thua v√† m·∫•t {arg2}$')
            await update(ctx.message.author.id, arg2, 'keobuabao_lose')
        elif arg1 == 'k√©o' and bot == 'bao':
            await ctx.send(f'[k√©o b√∫a bao]\nbot ch·ªçn: {bot}\nb·∫°n ch·ªçn: {arg1}\nK·∫øt qu·∫£: B·∫°n ƒë√£ th·∫Øng v√† nh·∫≠n ƒë∆∞·ª£c {arg2}$')
            await update(ctx.message.author.id, arg2, 'keobuabao_win')
        elif arg1 == 'b√∫a' and bot == 'bao':
            await ctx.send(f'[k√©o b√∫a bao]\nbot ch·ªçn: {bot}\nb·∫°n ch·ªçn: {arg1}\nK·∫øt qu·∫£: B·∫°n ƒë√£ thua v√† m·∫•t {arg2}$')
            await update(ctx.message.author.id, arg2, 'keobuabao_lose')
        elif arg1 == 'b√∫a' and bot == 'k√©o':
            await ctx.send(f'[k√©o b√∫a bao]\nbot ch·ªçn: {bot}\nb·∫°n ch·ªçn: {arg1}\nK·∫øt qu·∫£: B·∫°n ƒë√£ th·∫Øng v√† nh·∫≠n ƒë∆∞·ª£c {arg2}$')
            await update(ctx.message.author.id, arg2, 'keobuabao_win')
        else:
            await ctx.send('l·ªói')
@bot.command()
async def vuatiengviet(ctx):
    try: 
        url_vuatiengviet = 'https://api.phamvandien.xyz/vuatiengviet/image?word='
        word_vuatiengviet = ["t√¥i y√™u b·∫°n", "c√° koi", "cu·ªën s√°ch", "t√¨nh y√™u", "ƒë·ªôc d∆∞·ª£c", "c√¥ ƒë·ªçng", "huy·ªÅn tho·∫°i", "sao bƒÉng", "qu·∫•n qu√Ωt", "b·∫≠c th·∫ßy", "∆∞·ªõc v·ªçng", "m∆° m·ªông", "t√¨nh t·ª©", "m·ªông m∆°", "n√¥ng nghi·ªáp", "bƒÉng h√†", "hi·∫øu ƒë·ªông", "sung s·ª©c", "c√¥ng lao", "t√¢m t√¨nh", "c·ªù b·∫°c", "ngu ng·ªëc", "n√¥ng tr∆∞·ªùng", "tr∆∞·ªùng th·ªç", "t√¥n tr·ªçng"]
        random_word_vuatiengviet = random.choice(word_vuatiengviet)
        full_url_vuatiengviet = url_vuatiengviet + random_word_vuatiengviet
        get_vuatiengviet = requests.get(full_url_vuatiengviet)
        file = open("vuatiengviet.png", "wb")
        file.write(get_vuatiengviet.content)
        file.close()
        send = await ctx.send('ƒë√¢y l√† c√¢u h·ªèi c·ªßa b·∫°n\nreply tin nh·∫Øn n√†y ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi, b·∫°n c√≥ 45 gi√¢y ƒë·ªÉ tr·∫£ l·ªùi', file = discord.File('vuatiengviet.png'))
        if " " in random_word_vuatiengviet:
            def check(m):
                return m.author.id == ctx.author.id and m.channel == ctx.channel and m.reference is not None and m.reference.message_id == send.id
            try:
                async with timeout(45):
                    while True:
                        message = await bot.wait_for('message', check=check)
                        if message:
                            if message.content.lower() == random_word_vuatiengviet:
                                await ctx.send(f'b·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng, ƒë√°p √°n l√† "{random_word_vuatiengviet}"')
                            else:
                                await ctx.send(f'sai r·ªìi ƒë√°p √°n l√† "{random_word_vuatiengviet}"')
            except asyncio.TimeoutError:
                await ctx.send('H·∫øt gi·ªù!')
    except:
        await ctx.send('hi·ªán t·∫°i l·ªánh b·∫°n ƒëang s·ª≠ d·ª•ng ƒë√£ g·∫∑p l·ªói, h√£y th·ª≠ l·∫°i sau. Xin l·ªói v√¨ s·ª± c·ªë n√†y')
@bot.command()
async def mark(ctx):
    await ctx.send('l·ªánh b·∫°n s·ª≠ d·ª•ng hi·ªán ƒëang g·∫∑p l·ªói, h√£y b√°o c√°o v·ªÅ admin b·∫±ng l·ªánh callad ƒë·ªÉ ƒë∆∞·ª£c s·ª≠a s·ªõm nh·∫•t')
@bot.command()
async def Phubcmt(ctx):
    try:
        send = await ctx.send('reply tin nh·∫Øn n√†y v√† c√°c nh·∫≠p th√¥ng tin c·∫ßn thi·∫øt theo m·∫´u sau:\n<text> | <username> | <uid (4 -> ‚àû)>')
        def check(m):
            return m.author.id == ctx.author.id and m.channel == ctx.channel and m.reference is not None and m.reference.message_id == send.id
        message = await bot.wait_for('message', check=check)
        split = message.content.lower().split(' | ')
        if len(split) != 3:
            await ctx.send('l·ªói, nh·∫≠p thi·∫øu th√¥ng tin')
        else:
            url_mark = f"https://manhict.tech/api/phubcmt?text={split[0]}&uid={split[2]}&name={split[1]}&apikey=KCL98tNB"
            get = requests.get(url_mark)
            if get.status_code != 200:
                await ctx.send('l·ªói')
            else:
                file = open("mark.png", "wb")
                file.write(get.content)
                file.close()
                await ctx.send('·∫£nh ƒë√¢y:)', file = discord.File('mark.png'))
    except:
        await ctx.send('hi·ªán t·∫°i l·ªánh b·∫°n ƒëang s·ª≠ d·ª•ng ƒë√£ g·∫∑p l·ªói, h√£y th·ª≠ l·∫°i sau. xin l·ªói v√¨ s·ª± c·ªë n√†y')
@bot.command()
async def tiki(ctx,*,arg = None):
    help_prefix = get_prefix()[str(ctx.message.guild.id)]['prefix']
    if arg == None:
        await ctx.send(f"b·∫°n ch∆∞a nh·∫≠p t√™n m√¨nh v√†o\n{help_prefix}tiki <name>")
    else:
        url_tiki = 'https://api.phamvandien.xyz/tiki?text='
        full_url_tiki = url_tiki + str(arg)
        get_tiki = requests.get(full_url_tiki)
        if get_tiki.status_code != 200:
            await ctx.send("l·ªói")
        else:
            file = open("tiki.png", "wb")
            file.write(get_tiki.content)
            file.close()
            await ctx.send('·∫£nh ƒë√¢y:)', file = discord.File('tiki.png'))
@bot.command()
async def dhbc(ctx):
    global random
    try:
        url_DHBC = ['https://goatbot.tk/api/duoihinhbatchu', 'https://api.phamvandien.xyz/game/dhbcv1', 'https://www.nguyenmanh.name.vn/api/dhbc1?apikey=KCL98tNB']
        random_dhbc = random.choice(url_DHBC)
        get_DHBC = requests.get(random_dhbc)
        data_DHBC = get_DHBC.text
        json_DHBC = json.loads(data_DHBC)
        if random_dhbc == 'https://goatbot.tk/api/duoihinhbatchu':
            image_DHBC = json_DHBC['data']['image1and2'] 
            sokt = json_DHBC['data']['soluongkt']
            dapan = json_DHBC['data']['wordcomplete']
            get_image_DHBC = requests.get(image_DHBC)
            file = open("DHBC.png", "wb")
            file.write(get_image_DHBC.content)
            file.close()
            send = await ctx.send(f'====ƒêU·ªîI H√åNH B·∫ÆT CH·ªÆ====\nƒë√¢y l√† c√¢u h·ªèi c·ªßa b·∫°n\ng·ª£i √Ω: t·ª´ n√†y c√≥ {sokt} ch·ªØ', file = discord.File('DHBC.png'))
            if "g" in random_dhbc:
                def check(m):
                    return m.author.id == ctx.author.id and m.channel == ctx.channel and m.reference is not None and m.reference.message_id == send.id
                message = await bot.wait_for('message', check=check)
                if str(message.content.upper()) == dapan:
                    await ctx.send(f'b·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng, ƒë√°p √°n l√†: {dapan}')
                else:
                    await ctx.send(f'sai r·ªìi, ƒë√°p √°n l√† {dapan}')
        elif random_dhbc == 'https://api.phamvandien.xyz/game/dhbcv1':
            image_DHBC = json_DHBC['dataGame']['link'] 
            sokt = json_DHBC['dataGame']['sokitu']
            dapan = json_DHBC['dataGame']['tukhoa']
            get_image_DHBC = requests.get(image_DHBC)
            file = open("DHBC.png", "wb")
            file.write(get_image_DHBC.content)
            file.close()
            send = await ctx.send(f'====ƒêU·ªîI H√åNH B·∫ÆT CH·ªÆ====\nƒë√¢y l√† c√¢u h·ªèi c·ªßa b·∫°n\ng·ª£i √Ω: t·ª´ n√†y l√† {sokt}', file = discord.File('DHBC.png'))
            if "a" in random_dhbc:
                def check(m):
                    return m.author.id == ctx.author.id and m.channel == ctx.channel and m.reference is not None and m.reference.message_id == send.id
                message = await bot.wait_for('message', check=check)
                if str(message.content.lower()) == dapan:
                    await ctx.send(f'b·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng, ƒë√°p √°n l√†: {dapan}')
                else:
                    await ctx.send(f'sai r·ªìi, ƒë√°p √°n l√† {dapan}')
        elif random_dhbc == 'https://www.nguyenmanh.name.vn/api/dhbc1?apikey=KCL98tNB':
            image_DHBC = json_DHBC['result']['link'] 
            sokt = json_DHBC['result']['sokitu']
            dapan = json_DHBC['result']['tukhoa']
            get_image_DHBC = requests.get(image_DHBC)
            file = open("DHBC.png", "wb")
            file.write(get_image_DHBC.content)
            file.close()
            send = await ctx.send(f'====ƒêU·ªîI H√åNH B·∫ÆT CH·ªÆ====\nƒë√¢y l√† c√¢u h·ªèi c·ªßa b·∫°n\ng·ª£i √Ω: t·ª´ n√†y l√† {sokt}', file = discord.File('DHBC.png'))
            if "a" in random_dhbc:
                def check(m):
                    return m.author.id == ctx.author.id and m.channel == ctx.channel and m.reference is not None and m.reference.message_id == send.id
                message = await bot.wait_for('message', check=check)
                if str(message.content.lower()) == dapan:
                    await ctx.send(f'b·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng, ƒë√°p √°n l√†: {dapan}')
                else:
                    await ctx.send(f'sai r·ªìi, ƒë√°p √°n l√† {dapan}')
    except Exception as e:
        print(e)
        await ctx.send('hi·ªán t·∫°i l·ªánh b·∫°n ƒëang s·ª≠ d·ª•ng ƒë√£ g·∫∑p l·ªói, h√£y th·ª≠ l·∫°i sau. xin l·ªói v√¨ s·ª± c·ªë n√†y')
@bot.command()
async def noitu(ctx):
    await ctx.send('ƒë√£ b·∫Øt ƒë·∫ßu, h√£y m·ªü ƒë·∫ßu tr√≤ ch∆°i v·ªõi m·ªôt t·ª´ ƒë·∫ßu ti√™n')
    while True:
        def check(m):
            return m.author.id == ctx.author.id
        message = await bot.wait_for('message', check=check)
        url_noitu = 'https://goatbot.tk/api/wordlink?text='
        full_url_noitu = url_noitu + str(message.content)
        get_noitu = requests.get(full_url_noitu)
        data_noitu = get_noitu.text
        json_noitu = json.loads(data_noitu)
        word_noitu = json_noitu['data']
        if "lose" in word_noitu:
            await ctx.send('b·∫°n th·∫Øng r·ªìi:((')
            break
        if message.content == "quit":
            await ctx.send('b·∫°n thua r·ªìiiiii:)')
            break
        else:
            await ctx.send(word_noitu)
@bot.command()
async def taoanhdep(ctx):
    send = await ctx.send('reply tin nh·∫Øn n√†y v√† nh·∫≠p ƒë·ªÉ t·∫°o ·∫£nh theo m·∫´u sau:\n<id nh√¢n v·∫≠t> | <ch·ªØ n·ªÅn> | <ch·ªØ k√≠>')
    def check(m):
        return m.author.id == ctx.author.id and m.channel == ctx.channel and m.reference is not None and m.reference.message_id == send.id
    message = await bot.wait_for('message', check=check)
    url_taoanhdep = 'https://goatbot.tk/taoanhdep/avataranime?apikey=ntkhangGoatBot'
    value = message.content.lower().split(" | ")
    id_taoanhdep = str(value[0])
    chunen = str(value[1])
    chuky = str(value[2])
    complete_url_taoanhdep = url_taoanhdep + "&chu_Nen=" + chunen + "&chu_Ky=" + chuky + "&id=" +id_taoanhdep 
    get_taoanhdep = requests.get(complete_url_taoanhdep)
    file = open("taoanhdep.png", "wb")
    file.write(get_taoanhdep.content)
    file.close()
    await ctx.send('·∫£nh c·ªßa b·∫°n ƒë√¢y:>', file = discord.File('taoanhdep.png'))
@bot.command()
async def translate(ctx, arg = None):
    if arg:
        url = "https://google-translate1.p.rapidapi.com/language/translate/v2/detect"

        payload = f"q={str(arg)}"
        headers = {
            "content-type": "application/x-www-form-urlencoded",
            "Accept-Encoding": "application/gzip",
            "X-RapidAPI-Key": "084e013269msh51bb766925d9cb1p188f2fjsn2ff8a09c96fd",
            "X-RapidAPI-Host": "google-translate1.p.rapidapi.com"
        }

        response = requests.request("POST", url, data=payload, headers=headers)
        data = json.loads(response.text)
        src = data['data']['detections'][0][0]['language']
        if src == "vi":
            url = "https://google-translate1.p.rapidapi.com/language/translate/v2"

            payload = f"q={str(arg)}&target=en&source=vi"
            headers = {
                "content-type": "application/x-www-form-urlencoded",
                "Accept-Encoding": "application/gzip",
                "X-RapidAPI-Key": "084e013269msh51bb766925d9cb1p188f2fjsn2ff8a09c96fd",
                "X-RapidAPI-Host": "google-translate1.p.rapidapi.com"
            }

            response2 = requests.request("POST", url, data=payload, headers=headers)
            data = json.loads(response2.text)
            text = data['data']['translations'][0]['translatedText']
            await ctx.send(f'k·∫øt qu·∫£ d·ªãch: "{text}"')
        elif src == "en":
            url = "https://google-translate1.p.rapidapi.com/language/translate/v2"

            payload = f"q={str(arg)}&target=vi&source=en"
            headers = {
                "content-type": "application/x-www-form-urlencoded",
                "Accept-Encoding": "application/gzip",
                "X-RapidAPI-Key": "084e013269msh51bb766925d9cb1p188f2fjsn2ff8a09c96fd",
                "X-RapidAPI-Host": "google-translate1.p.rapidapi.com"
            }

            response3 = requests.request("POST", url, data=payload, headers=headers)
            data = json.loads(response3.text)
            text = data['data']['translations'][0]['translatedText']
            await ctx.send(f'k·∫øt qu·∫£ d·ªãch: "{text}"')
        else:
            url = "https://google-translate1.p.rapidapi.com/language/translate/v2"

            payload = f"q={str(arg)}&target=vi&source={src}"
            headers = {
                "content-type": "application/x-www-form-urlencoded",
                "Accept-Encoding": "application/gzip",
                "X-RapidAPI-Key": "084e013269msh51bb766925d9cb1p188f2fjsn2ff8a09c96fd",
                "X-RapidAPI-Host": "google-translate1.p.rapidapi.com"
            }

            response3 = requests.request("POST", url, data=payload, headers=headers)
            data = json.loads(response3.text)
            text = data['data']['translations'][0]['translatedText']
            await ctx.send(f'k·∫øt qu·∫£ d·ªãch: "{text}"')
    else:
        await ctx.send("b·∫°n ch∆∞a nh·∫≠p c√¢u c·∫ßn d·ªãch")
@bot.command()
async def caunoihay(ctx):
    sentence = ['M·ªôt c√°ch ƒë·ªÉ t·∫≠n d·ª•ng t·ªëi ƒëa cu·ªôc s·ªëng l√† xem n√≥ nh∆∞ m·ªôt cu·ªôc phi√™u l∆∞u ‚Äì William Feather',' M·∫°nh d·∫°n n√≥i T√¥i ƒë√£ sai l√† c√°ch ta ch·∫•p nh·∫≠n ƒë·ªëi m·∫∑t v·ªõi t√¨nh hu·ªëng kh√≥ khƒÉn. Vi·ªác ƒë√≥ c√≥ ph·∫ßn m·∫°o hi·ªÉm nh∆∞ng nh·ªØng g√¨ ta nh·∫≠n ƒë∆∞·ª£c s·∫Ω v∆∞·ª£t ngo√†i s·ª± mong ƒë·ª£i‚Äô - Rich DeVos', 'T√≠ch c·ª±c, t·ª± tin v√† ki√™n tr√¨ l√† ch√¨a kh√≥a trong cu·ªôc s·ªëng. V√¨ v·∫≠y ƒë·ª´ng bao gi·ªù t·ª´ b·ªè ch√≠nh m√¨nh‚Äô ‚Äì Khalid', 'Y√™u t√¥i hay gh√©t t√¥i, c·∫£ hai ƒë·ªÅu c√≥ l·ª£i cho t√¥i. N·∫øu b·∫°n y√™u t√¥i, t√¥i s·∫Ω lu√¥n ·ªü trong tim b·∫°n v√† n·∫øu b·∫°n gh√©t t√¥i, t√¥i s·∫Ω ·ªü trong t√¢m tr√≠ b·∫°n‚Äô ‚Äì Baland Quandeel', 'Th√°i ƒë·ªô quan tr·ªçng h∆°n qu√° kh·ª©, h∆°n gi√°o d·ª•c, h∆°n ti·ªÅn b·∫°c, h∆°n ho√†n c·∫£nh, h∆°n nh·ªØng g√¨ m·ªçi ng∆∞·ªùi l√†m ho·∫∑c n√≥i. N√≥ quan tr·ªçng h∆°n ngo·∫°i h√¨nh, nƒÉng khi·∫øu hay k·ªπ nƒÉng‚Äô ‚Äì Charles Swindoll', 'H√£y tin v√†o ch√≠nh m√¨nh! C√≥ ni·ªÅm tin v√†o kh·∫£ nƒÉng c·ªßa b·∫°n! N·∫øu kh√¥ng c√≥ s·ª± t·ª± tin khi√™m t·ªën nh∆∞ng h·ª£p l√Ω v√†o nƒÉng l·ª±c c·ªßa ch√≠nh m√¨nh, b·∫°n kh√¥ng th·ªÉ th√†nh c√¥ng hay h·∫°nh ph√∫c‚Äô - Norman Vincent Peale', 'Trong ƒë·ªùi ng∆∞·ªùi, c√≥ hai con ƒë∆∞·ªùng b·∫±ng ph·∫≥ng kh√¥ng tr·ªü ng·∫°i: M·ªôt l√† ƒëi t·ªõi l√Ω t∆∞·ªüng, m·ªôt l√† ƒëi t·ªõi c√°i ch·∫øt‚Äô - Lev Tolstoy', 'B·∫°n c√≥ th·ªÉ thay ƒë·ªïi th·∫ø gi·ªõi c·ªßa m√¨nh b·∫±ng c√°ch thay ƒë·ªïi l·ªùi n√≥i c·ªßa b·∫°n ... H√£y nh·ªõ r·∫±ng, c√°i ch·∫øt v√† s·ª± s·ªëng n·∫±m trong s·ª©c m·∫°nh c·ªßa l∆∞·ª°i‚Äô - Joel Osteen', 'L·∫°c quan l√† ni·ªÅm tin d·∫´n ƒë·∫øn th√†nh t√≠ch. Kh√¥ng c√≥ g√¨ c√≥ th·ªÉ ƒë∆∞·ª£c th·ª±c hi·ªán m√† kh√¥ng c√≥ hy v·ªçng v√† s·ª± t·ª± tin‚Äô - Helen Keller', '‚ÄòN·∫øu b·∫°n mu·ªën th√†nh c√¥ng, b·∫°n n√™n t√¨m ra nh·ªØng con ƒë∆∞·ªùng m·ªõi, thay v√¨ ƒëi tr√™n nh·ªØng con ƒë∆∞·ªùng m√≤n c·ªßa s·ª± th√†nh c√¥ng ƒë∆∞·ª£c ch·∫•p nh·∫≠n‚Äô - John D. Rockefeller', '‚ÄòN·∫øu b·∫°n kh√¥ng th√≠ch c√°i g√¨ ƒë√≥, h√£y thay ƒë·ªïi n√≥. N·∫øu b·∫°n kh√¥ng th·ªÉ thay ƒë·ªïi n√≥, h√£y thay ƒë·ªïi th√°i ƒë·ªô c·ªßa b·∫°n‚Äô - Maya Angelou']
    result_sentence = random.choice(sentence)
    await ctx.send(result_sentence)
@bot.command()
async def thayboi(ctx):
    random_card = ['con b·ªëc ƒë∆∞·ª£c l√° ‚ô•Ô∏è, C∆° l√† n∆∞·ªõc b√†i m√†u ƒë·ªè, ƒë∆∞·ª£c th·ªÉ hi·ªán b·∫±ng h√¨nh v·∫Ω tim s·∫Ω cho b·∫°n nh·ªØng d·ª± ƒëo√°n trong chuy·ªán t√¨nh c·∫£m, h√¥n nh√¢n v·ª£ ch·ªìng, gia ƒë√¨nh n√≥i chung‚Ä¶ V·∫≠n l√° b√†i n∆∞·ªõc C∆° h√™n hay xui, may hay r·ªßi c√≤n ph·ª• thu·ªôc v√†o nh·ªØng con s·ªë c·ªßa ch√∫ng.', 'con b·ªëc ƒë∆∞·ª£c l√° ‚ô¶Ô∏è, l√† n∆∞·ªõc b√†i n·ªïi b·∫≠t v·ªõi h√¨nh v·∫Ω t∆∞·ª£ng tr∆∞ng t·ª±a nh∆∞ h√¨nh thoi d·ª±ng ƒë·ª©ng, con R√¥ l√† d·ª± b√°o t·ªët v·ªÅ ƒë∆∞·ªùng c√¥ng danh, s·ª± nghi·ªáp v·ªØng v√†ng, s·ª± sung t√∫c v·ªÅ ti·ªÅn b·∫°c.', 'con b·ªëc ƒë∆∞·ª£c l√° ‚ô£Ô∏è. Trong h√¨nh t∆∞·ª£ng nh∆∞ c√°i c√¢y mang m√†u ƒëen, n∆∞·ªõc Chu·ªìn mang theo s·ª± t·ªët l√†nh v·ªÅ nh√¢n duy√™n, ti·ªÅn b·∫°c, s·ª± nghi·ªáp, cu·ªôc s·ªëng‚Ä¶ T√≥m l·∫°i, n∆∞·ªõc Chu·ªìn b√°o hi·ªáu s·ª± vi√™n m√£n c·ªßa ƒë·ªùi ng∆∞·ªùi. V√¨ v·∫≠y n√™n trong ng√¥n ng·ªØ c·ªßa b√≥i b√†i, ng∆∞·ªùi ta hay n√≥i: ‚ÄúC√≥ Chu·ªìn l√† c√≥ ti·ªÅn"', 'con b·ªëc ƒë∆∞·ª£c l√° ‚ô†Ô∏è. ƒê√¢y c√≥ l·∫Ω l√† n∆∞·ªõc b√†i kh√¥ng ƒë∆∞·ª£c tr√¥ng ch·ªù nh·∫•t trong c√°c qu√¢n b√†i T√¢y v√¨ √Ω nghƒ©a c·ªßa n√≥ mang l·∫°i th·∫≠t s·ª± kh√¥ng t·ªët. Ng∆∞·ªùi c√≥ qu√¢n b√†i n∆∞·ªõc n√†y th∆∞·ªùng g·∫∑p nh·ªØng v∆∞·ªõng m·∫Øc v√† kh√≥ khƒÉn kh√≥ gi·∫£i quy·∫øt ·ªü nhi·ªÅu ph∆∞∆°ng di·ªán.\nCon ng∆∞·ªùi: hay ·ªëm ƒëau, b·ªánh v·∫∑t, ph·∫£i v∆∞∆°n l√™n trong v·∫•t v·∫£.\nS·ª± nghi·ªáp c√¥ng danh: kh√≥ thƒÉng ti·∫øn, lu√¥n g·∫∑p tr·∫Øc tr·ªü, v·∫≠t c·∫£n‚Ä¶\nT√¨nh duy√™n: l·∫≠n ƒë·∫≠n, g√£y g√°nh, chia c·∫Øt‚Ä¶']
    result =  random.choice(random_card)
    await ctx.send(result)
@bot.group(invoke_without_command=True)
async def truyentranh(ctx):
    await ctx.send('ƒë·ªçc, t√¨m, xem c√°c truy·ªán m·ªõi ra tr√™n truyentranh24.com v√† toptruyen\ns·ª≠ d·ª•ng: /truyentranh search <keyword> (t√¨m ki·∫øm truy·ªán)\ntruyentranh news (c√°c truy·ªán m·ªõi nh·∫•t truy√™n toptruyen)')
@truyentranh.command()
async def search(ctx, *, arg = None):
    if arg == None:
        await ctx.send('ph·∫ßn t√¨m ki·∫øm truy·ªán kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
    else:
        full_url_search = 'https://goatbot.tk/truyentranh24/search?q=' + str(arg) + '&apikey=ntkhang'
        get_search = requests.get(full_url_search)
        json = get_search.json()
        name = json['data'][0]['name']
        img = json['data'][0]['thumbnail']
        get_img = requests.get(img)
        file = open("truyentranh.png", "wb")
        file.write(get_img.content)
        file.close()
        href = json['data'][0]['href']  
        result = str(name) + '\n' + 'href: ' + str(href)
        await ctx.send(result, file = discord.File('truyentranh.png'))
@truyentranh.command()
async def news(ctx):
    try:
        full_url = 'https://thieutrungkien.up.railway.app/toptruyen/'
        get = requests.get(full_url)
        data_txt = get.text
        data_json = json.loads(data_txt)
        truyen1_name = data_json['data'][0]['name']
        truyen1_link = data_json['data'][0]['url']
        truyen2_name = data_json['data'][1]['name']
        truyen2_link = data_json['data'][1]['url']
        truyen3_name = data_json['data'][2]['name']
        truyen3_link = data_json['data'][2]['url']
        truyen4_name = data_json['data'][3]['name']
        truyen4_link = data_json['data'][3]['url']
        truyen5_name = data_json['data'][4]['name']
        truyen5_link = data_json['data'][4]['url']
        truyen1_image = data_json['data'][0]['images']
        get_img = requests.get(truyen1_image)
        file = open("truyentranh.png", "wb")
        file.write(get_img.content)
        file.close()
        await ctx.send(f'top 5 c√°c truy·ªán m·ªõi nh·∫•t tr√™n toptruyen.net\n\n**{truyen1_name}**\nlink: {truyen1_link}\n\n**{truyen2_name}**\nlink: {truyen2_link}\n\n**{truyen3_name}\nlink: {truyen3_link}**\n\n**{truyen4_name}**\nlink: {truyen4_link}\n\n**{truyen5_name}**\nlink: {truyen5_link}',file = discord.File('truyentranh.png'))
    except Exception as e:
        print(e)
        await ctx.send('error')
@bot.command()
async def shopmaihuong(ctx):
    try:
        send = await ctx.send('reply tin nh·∫Øn n√†y v√† nh·∫≠p tin nh·∫Øn ƒë·ªÉ t·∫°o ·∫£nh theo m·∫´u sau:\ntext1 | text2')
        def check(m):
            return m.author.id == ctx.author.id and m.channel == ctx.channel and m.reference is not None and m.reference.message_id == send.id
        message = await bot.wait_for('message', check=check)
        value = message.content.lower().split(" | ")
        text1 = str(value[0])
        text2 = str(value[1])
        url = 'https://api.phamvandien.xyz/shopmaihuong?text1=' + text1 + "&text2=" + text2
        get = requests.get(url)
        file = open("shopmaihuong.png", "wb")
        file.write(get.content)
        file.close()
        await ctx.send('·∫£nh c·ªßa b·∫°n ƒë√¢y:)', file = discord.File('shopmaihuong.png'))
    except:
        await ctx.send('hi·ªán t·∫°i l·ªánh b·∫°n ƒëang s·ª≠ d·ª•ng ƒë√£ g·∫∑p l·ªói, h√£y th·ª≠ l·∫°i sau. xin l·ªói v√¨ s·ª± c·ªë n√†y')
@bot.command()
async def wiki(ctx, *, arg = None):
    if arg == None:
        await ctx.send('/wiki <keyword>\nph·∫ßn t√¨m ki·∫øm kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
    else:
        wikipedia.set_lang("vi")
        result = wikipedia.summary(f"{arg}", sentences=5)
        await ctx.send(result)
@bot.command()
async def callad(ctx, *, arg=None):
    if arg == None:
        await ctx.send(f"B·∫°n ch∆∞a nh·∫≠p th√¥ng tin mu·ªën b√°o c√°o v·ªÅ admin\n{get_prefix()[str(ctx.message.guild.id)]['prefix']}callad <b√°o c√°o>")
    else:
        user = await bot.fetch_user("716146182849560598")
        await user.send(f"b√°o c√°o t·ª´: {ctx.message.author}\nid: {ctx.message.author.id}\nt·ª´ nh√≥m: {ctx.channel.id}\nn·ªôi dung: {arg}")
        await ctx.send('ƒë√£ b√°o c√°o v·ªÅ admin th√†nh c√¥ng')
@bot.command()
async def sendnoti(ctx):
    send = await ctx.send('reply tin nh·∫Øn n√†y v√† nh·∫≠p theo m·∫´u sau:\n<id channel> | ph·∫£n h·ªìi user | ph·∫£n h·ªìi channel | <id user>')
    def check(m):
        return m.author.id == ctx.author.id and m.channel == ctx.channel and m.reference is not None and m.reference.message_id == send.id
    message = await bot.wait_for('message', check=check)
    value = message.content.lower().split(" | ")
    id_channel = str(value[0])
    reply_user = str(value[1])
    reply_channel = str(value[2])
    id_user = str(value[3])
    channel = await bot.fetch_channel(id_channel)
    user = await bot.fetch_user(f"{id_user}")
    await user.send(f'c·∫£m ∆°n b·∫°n v·ªÅ ƒë√≥ng g√≥p, sau ƒë√¢y l√† ph·∫£n h·ªìi c·ªßa admin:\n{reply_user}')
    await channel.send(f'ph·∫£n h·ªìi t·ª´ admin ƒë·∫øn k√™nh:\nn·ªôi dung: {reply_channel}')
@bot.command()
@commands.cooldown(1, 86400, commands.BucketType.user)
async def daily(ctx):
    await open_account(ctx.message.author.id)
    member_data = await get_bank_data()
    member_data[str(ctx.message.author.id)]['Wallet'] += 100
    save_member_data(member_data)
    await ctx.send('nh·∫≠n th∆∞·ªüng online th√†nh c√¥ng 100$')
@daily.error
async def daily_error(ctx, error):
    if isinstance(error, commands.CommandOnCooldown):
        await ctx.send('b·∫°n ƒë√£ nh·∫≠n th∆∞·ªüng ng√†y h√¥m nay r·ªìi h√£y quay l·∫°i sau {:.2f} gi√¢y'.format(error.retry_after))
@bot.command()
async def slot(ctx, arg = None):
    await open_account(ctx.message.author.id)
    member_data = await get_bank_data()
    if arg == None:
        await ctx.send('B·∫°n ch∆∞a nh·∫≠p s·ªë ti·ªÅn mu·ªën c∆∞·ª£c')
    elif 10 > int(arg):
        await ctx.send('ti·ªÅn c∆∞·ª£c kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng v√† ph·∫£i t·ª´ 10$ tr·ªü l√™n')
    elif member_data[str(ctx.message.author.id)]['Wallet'] < int(arg):
        await ctx.send('b·∫°n kh√¥ng c√≥ ƒë·ªß s·ªë ti·ªÅn ƒë·ªÉ ch∆°i')
    else:
        try:
            random_icon = ['ü•ë', 'üçê', 'ü•≠', 'üçé']
            result = []
            for i in range(3):
                random_result = random.choice(random_icon)
                result.append(random_result)
            if result[0] == result[1] or result[0] == result[2] or result[1] == result[0] or result[1] == result[2] or result[2] == result[0] or result[2] == result[1] or result[1] == result[2] == result[0]:
                await ctx.send(f'K·∫øt qu·∫£\n\nüïπÔ∏è{result[0]} | {result[1]} | {result[2]}üïπÔ∏è\n\nB·∫°n ƒë√£ th·∫Øng!')
                await update(ctx.message.author.id, arg, 'keobuabao_win')
            else:
                await ctx.send(f'K·∫øt qu·∫£\n\nüïπÔ∏è{result[0]} | {result[1]} | {result[2]}üïπÔ∏è\n\nB·∫°n thua r·ªìi!:(')
                await update(ctx.message.author.id, arg, 'keobuabao_lose')
        except Exception as e:
            print(e)
            await ctx.send('hi·ªán t·∫°i l·ªánh b·∫°n ƒëang s·ª≠ d·ª•ng ƒë√£ g·∫∑p l·ªói, h√£y th·ª≠ l·∫°i sau. xin l·ªói v√¨ s·ª± c·ªë n√†y')
@bot.command()
async def news(ctx):
    get = requests.get('https://vnexpress.net/')
    soup = BeautifulSoup( get.content , 'html.parser')
    results = []
    dess = []
    for result in soup.find_all(class_ = 'title-news'):
        results.append(result.text)
        results.append(result.a.get('href'))
    for des in soup.find_all(class_ = 'description'):
        dess.append(des.text)
    title = results[0]
    link = results[1]
    des = dess[1]
    await ctx.send(f'tin m·ªõi nh·∫•t h√¥m nay: {title}{des}\nlink: {link}')
@bot.command()
async def dovui(ctx):
    try:
        get = requests.get('https://www.nguyenmanh.name.vn/api/dovui2?apikey=KCL98tNB')
        data_txt = get.text
        data_json = json.loads(data_txt)
        question = data_json['result']['question']
        option = data_json['result']['option']
        result = data_json['result']['correct']
        if len(option) == 3:
            option1 = data_json['result']['option'][0]
            option2 = data_json['result']['option'][1]
            option3 = data_json['result']['option'][2]
            send = await ctx.send(f'{question}\n1. {option1}\n2. {option2}\n3. {option3}\nReply tin nh·∫Øn n√†y v√† tr·∫£ l·ªùi theo s·ªë th·ª© t·ª± c√°c ƒë√°p')
            def check(m):
                return m.author.id == ctx.author.id and m.channel == ctx.channel and m.reference is not None and m.reference.message_id == send.id
            message = await bot.wait_for('message', check=check)
            if int(message.content.lower()) == result:
                if result == 1:
                    result = option1
                    await ctx.send(f'b·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng, ƒë√°p √°n l√† {result}')
                elif result == 2:
                    result = option2
                    await ctx.send(f'b·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng, ƒë√°p √°n l√† {result}')
                elif result == 3:
                    result = option3
                    await ctx.send(f'b·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng, ƒë√°p √°n l√† {result}')
            elif int(message.content.lower()) != result:
                if result == 1:
                    result = option1
                    await ctx.send(f'b·∫°n ƒë√£ tr·∫£ l·ªùi sai r·ªìi:(, ƒë√°p √°n ƒë√∫ng l√† {result}')
                elif result == 2:
                    result = option2
                    await ctx.send(f'b·∫°n ƒë√£ tr·∫£ l·ªùi sai r·ªìi:(, ƒë√°p √°n ƒë√∫ng l√† {result}')
                elif result == 3:
                    result = option3
                    await ctx.send(f'b·∫°n ƒë√£ tr·∫£ l·ªùi sai r·ªìi:(, ƒë√°p √°n ƒë√∫ng l√† {result}')
        elif len(option) == 4:
            option1 = data_json['result']['option'][0]
            option2 = data_json['result']['option'][1]
            option3 = data_json['result']['option'][2]
            option4 = data_json['result']['option'][3]
            send = await ctx.send(f'{question}\n1. {option1}\n2. {option2}\n3. {option3}\n4. {option4}\nReply tin nh·∫Øn n√†y v√† tr·∫£ l·ªùi theo s·ªë th·ª© t·ª± c√°c ƒë√°p')
            def check(m):
                return m.author.id == ctx.author.id and m.channel == ctx.channel and m.reference is not None and m.reference.message_id == send.id
            message = await bot.wait_for('message', check=check)
            if int(message.content.lower()) == result:
                if result == 1:
                    result = option1
                    await ctx.send(f'b·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng, ƒë√°p √°n l√† {result}')
                elif result == 2:
                    result = option2
                    await ctx.send(f'b·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng, ƒë√°p √°n l√† {result}')
                elif result == 3:
                    result = option3
                    await ctx.send(f'b·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng, ƒë√°p √°n l√† {result}')
                elif result == 4:
                    result = option4
                    await ctx.send(f'b·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng, ƒë√°p √°n l√† {result}')
            elif int(message.content.lower()) != result:
                if result == 1:
                    result = option1
                    await ctx.send(f'b·∫°n ƒë√£ tr·∫£ l·ªùi sai r·ªìi:(, ƒë√°p √°n ƒë√∫ng l√† {result}')
                elif result == 2:
                    result = option2
                    await ctx.send(f'b·∫°n ƒë√£ tr·∫£ l·ªùi sai r·ªìi:(, ƒë√°p √°n ƒë√∫ng l√† {result}')
                elif result == 3:
                    result = option3
                    await ctx.send(f'b·∫°n ƒë√£ tr·∫£ l·ªùi sai r·ªìi:(, ƒë√°p √°n ƒë√∫ng l√† {result}')
                elif result == 4:
                    result = option4
                    await ctx.send(f'b·∫°n ƒë√£ tr·∫£ l·ªùi sai r·ªìi:(, ƒë√°p √°n ƒë√∫ng l√† {result}')
    except Exception as e:
        print(e)
        await ctx.send(f"l·ªánh b·∫°n ƒëang s·ª≠ d·ª•ng ƒë√£ x·∫£y ra l·ªói, h√£y b√°o c√°o v·ªÅ admin b·∫±ng l·ªánh {get_prefix()[str(ctx.message.guild.id)]['prefix']}callad, ho·∫∑c c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n kh√¥ng ph·∫£i l√† m·ªôt con s·ªë")
@bot.command(name = "setmoney")
async def setmoney(ctx, arg = None, arg2 = None):
    if arg == None or arg2 == None or arg == None and arg2 == None:
        await ctx.send('sai c√∫ ph√°p')
    elif ctx.message.author.id != 716146182849560598:
        await ctx.send('b·∫°n kh√¥ng ph·∫£i admin n√™n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y')
    else:
        await update(ctx.message.author.id, arg, arg2)
        await ctx.send('done')
@bot.command(name = "google_search")
async def google_search(ctx, *, arg = None):
    url = f"https://google-search3.p.rapidapi.com/api/v1/search/q={arg}"
    headers = {
            "X-User-Agent": "desktop",
            "X-Proxy-Location": "VI",
            "X-RapidAPI-Key": "084e013269msh51bb766925d9cb1p188f2fjsn2ff8a09c96fd",
            "X-RapidAPI-Host": "google-search3.p.rapidapi.com"
        }
    response = requests.request("GET", url, headers=headers)
    data = json.loads(response.text)
    if arg == None:
        await ctx.send('ph·∫ßn t√¨m ki·∫øm kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
    elif len(data['results']) != 0:
        url = f"https://google-search3.p.rapidapi.com/api/v1/search/q={arg}"
        headers = {
            "X-User-Agent": "desktop",
            "X-Proxy-Location": "VI",
            "X-RapidAPI-Key": "084e013269msh51bb766925d9cb1p188f2fjsn2ff8a09c96fd",
            "X-RapidAPI-Host": "google-search3.p.rapidapi.com"
        }

        response = requests.request("GET", url, headers=headers)
        data = json.loads(response.text)
        result1_des = data['results'][0]['description']
        result1_title = data['results'][0]['title']
        result1_link = data['results'][0]['link']
        await ctx.send(f'k·∫øt qu·∫£ search google h√†ng ƒë·∫ßu cho t·ª´ kh√≥a "{arg}":\n{result1_title}\n-{result1_des}-\nlink: {result1_link}')
    else:
        await ctx.send('kh√¥ng c√≥ k·∫øt qu·∫£ cho t·ª´ kh√≥a b·∫°n nh·∫≠p')
@bot.command()
async def setprefix(ctx, arg = None):
    try:
        users = get_prefix()
        if arg == None:
            await ctx.send('nh·∫≠p prefix c·∫ßn d·ªïi')
        else:
            users[str(ctx.message.guild.id)]['prefix'] = str(arg)
            with open(r"C:\codde\discord_bot\data.json", 'w') as f:
                json.dump(users, f)
            await ctx.send(f'ƒë√£ thay prefix c·ªßa sever th√†nh {arg}')
    except Exception as e:
        print(e)   
@bot.command()
async def banner1(ctx):
    try:
        send = await ctx.send('reply tin nh·∫Øn n√†y, ƒë·ªÉ t·∫°o ·∫£nh banner, nh·∫≠p theo m·∫´u sau:\n<text1> | <text2> | <id>')
        def check(m):
            if m.reference is not None:
                if m.reference.message_id == send.id and m.author.id == ctx.author.id:
                    return True 
        message = await bot.wait_for('message', check = check)
        value = message.content.split(" | ")
        name = value[0]
        sub_name = value[1]
        id_character = value[2]
        url = f"https://www.nguyenmanh.name.vn/api/fbcover2?name={name}&id={id_character}&subname={sub_name}&apikey=KCL98tNB"
        get = requests.get(url)
        if get.status_code == 200:
            file = open("banner1.png", "wb")
            file.write(get.content)
            file.close()
            await ctx.send('·∫£nh ƒë√¢y:)', file = discord.File('banner1.png'))
        else:
            await ctx.send('l·ªánh b·∫°n s·ª≠ d·ª•ng hi·ªán ƒëang b·ªã l·ªói, h√£y b√°o c√≥a l√™n admin ƒë·ªÉ ƒë∆∞·ª£c s·ª≠a s·ªõm nh·∫•t')
    except Exception as e:
        print(e)
        await ctx.send('l·ªói')
@bot.command()
async def videofb(ctx, url = None):
    try:
        if url == None:
            await ctx.send("B·∫°n ch∆∞a nh·∫≠p link video facebook c·∫ßn t·∫£i xu·ªëng") 
        else:
            await ctx.send("ƒëang t·∫£i video, vui l√≤ng ƒë·ª£i...")
            link = f"https://www.nguyenmanh.name.vn/api/fbDL?url={url}&apikey=KCL98tNB"
            get = requests.get(link)
            data = json.loads(get.text)
            urllib.request.urlretrieve(data['result']['hd'], 'fb_download.mp4') 
            await ctx.reply('video c·ªßa b·∫°n ƒë√¢y', file = discord.File('fb_download.mp4'))
    except Exception as e:
        print(e)
        await ctx.reply('l·ªánh b·∫°n ƒëang s·ª≠ d·ª•ng ƒë√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i sau')
@bot.command()
async def severs(ctx):
  await ctx.send(bot.guilds)
@bot.command()
async def channel(ctx):
  for server in bot.guilds:
    await ctx.send(server.text_channels)
@bot.command(pass_context=True)
async def sendnoti2(ctx, *, msg):
	for server in bot.guilds:
		for channel in server.text_channels:
			try:
				await channel.send(msg)
			except Exception as e:
				print(e)
				continue
			else:
				break
@bot.command()
async def baicao(ctx, arg = None):
    try:
        def atoi(text):
            return int(text) if text.isdigit() else text

        def natural_keys(text):
            '''
            alist.sort(key=natural_keys) sorts in human order
            http://nedbatchelder.com/blog/200712/human_sorting.html
            (See Toothy's implementation in the comments)
            '''
            return [ atoi(c) for c in re.split(r'(\d+)', text) ]
        def read():
            with open(r"C:\codde\discord_bot\test.json", 'r') as f:
                users = json.load(f)
                return users
        def save(data):
            with open(r"C:\codde\discord_bot\test.json", 'w') as f:
                json.dump(data, f)
        users = read()
        list_player = []
        list_player_name = []
        list_player_result = []
        message = "-----K·∫øt qu·∫£-----\n"
        prefix = users[str(ctx.message.guild.id)]['prefix']
        if arg == None:
            await ctx.send(f'game b√†i c√†o nhi·ªÅu ng∆∞·ªùi ch∆°i\n{prefix}baicao [create/start/join]')
        elif 'baicao_create' not in read()[str(ctx.message.guild.id)] and arg == 'create':
            list_player.append(str(ctx.message.author.id))
            list_player_name.append(str(ctx.message.author))
            users[str(ctx.message.guild.id)]['baicao'] = {}
            users[str(ctx.message.guild.id)]['baicao']['baicao_create'] = True
            users[str(ctx.message.guild.id)]['baicao']['player'].append(str(ctx.message.author.id))
            users[str(ctx.message.guild.id)]['baicao']['player_name'].append(str(ctx.message.author))
            save(users)
            await ctx.send(f'ƒê√£ t·∫°o b√†n b√†i c√†o th√†nh c√¥ng\nH√£y nh·∫≠p {prefix}baicao join ƒë·ªÉ tham gia b√†n ch∆°i (ng∆∞·ªùi t·∫°o kh√¥ng c·∫ßn nh·∫≠p)')
        elif 'baicao_create' in read()[str(ctx.message.guild.id)] and arg == 'create':
            await ctx.send('b√†n ƒë√£ ƒë∆∞·ª£c t·∫°o, kh√¥ng th·ªÉ t·∫°o th√™m')
        elif arg == 'join' and str(ctx.message.author.id) not in users[str(ctx.message.guild.id)]['baicao']['player'] and len(users[str(ctx.message.guild.id)]['baicao']['player']) <= 4:
            list_player.append(str(ctx.message.author.id))
            list_player_name.append(str(ctx.message.author))
            users[str(ctx.message.guild.id)]['baicao']['player'] = list_player
            users[str(ctx.message.guild.id)]['baicao']['player_name'] = list_player_name
            save(users)
        elif arg == 'join' and str(ctx.message.author.id) in users[str(ctx.message.guild.id)]['baicao']['player']:
            await ctx.send('b·∫°n ƒë√£ tham gia b√†n ch∆°i, kh√¥ng th·ªÉ tham gia l·∫°i')
        elif arg == 'join' and 'baicao_create' not in read()[str(ctx.message.guild.id)]['baicao']:
            await ctx.send('ch∆∞a t·∫°o b√†n ƒë·ªÉ c√≥ th·ªÉ ch∆°i')
        elif arg == 'start' and 'baicao_create' in read()[str(ctx.message.guild.id)]['baicao'] and len(list_player) >= 2 and len(list_player) <= 4:        
            for i in range(len(list_player)):
                card1 = random.randint(1, 9)
                card2 = random.randint(1, 9)
                card3 = random.randint(1, 9)
                result = card1 + card2 + card3
                if result >= 10:
                    result -= 10
                elif result >= 20:
                    result -= 20
                list_player_result.append(f"{list_player_name[i - 1]}: {result}")
                user = await bot.fetch_user(str(list_player[i - 1]))
                await user.send(f"bai cua ban: {card1} | {card2} | {card3}\ntong bai: {result}")
                list_player_result.sort(key = natural_keys)
            for i in list_player_result:
                message = message + f"{list_player_result[i]}\n"
                await ctx.send(message)
    except Exception as e:
        print(e)
#Functions
async def open_account(user):
    users = await get_bank_data()
    if str(user) in users:
        return False
    else:
        users[str(user)] = {}
        users[str(user)]["Wallet"] = 0
        users[str(user)]["Bank"] = 0
        users[str(user)]["pc"] = 0

    with open("data.json", 'w') as f:
        json.dump(users, f)
    return True


async def get_bank_data():
    with open("data.json", 'r') as f:
        users = json.load(f)
    return users
async def update(user, change, mode):
    await open_account(user)
    member_data = await get_bank_data()
    if mode == 'wallet':
        member_data[str(user)]['Wallet'] -= int(change)
        member_data[str(user)]['Bank'] += int(change)
        save_member_data(member_data)
    elif mode == 'bank':
        member_data[str(user)]['Wallet'] += int(change)
        member_data[str(user)]['Bank'] -= int(change)
        save_member_data(member_data)
    elif mode == 'keobuabao_win':
        member_data[str(user)]['Wallet'] += int(change)
        save_member_data(member_data)
    elif mode == 'keobuabao_lose':
        member_data[str(user)]['Wallet'] -= int(change)
        save_member_data(member_data)
    elif mode == 'receive_user':
        member_data[str(user)]['Bank'] += int(change)
        save_member_data(member_data)
    elif mode == 'send_user':
        member_data[str(user)]['Bank'] -= int(change)
        save_member_data(member_data)
    elif mode == 'setmoney-wallet':
        member_data[str(user)]['Wallet'] = int(change)
        save_member_data(member_data)
    elif mode == 'setmoney-bank':
        member_data[str(user)]['Bank'] = int(change)
        save_member_data(member_data)
    else:
        print('error')
def save_member_data(data):
    with open("data.json", 'w') as f:
        json . k·∫øt xu·∫•t ( d·ªØ li·ªáu , f )
bot . run ( 'MTAwMTc2NDAzMDU1OTU1MTU1OA.GKI4MI.aXEPEBDj64PwO7jcsZH-2mgRJJ0JFviFCT3fGs' )

